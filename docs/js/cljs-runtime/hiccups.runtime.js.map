{"version":3,"sources":["hiccups/runtime.cljs"],"mappings":"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","names":["hiccups.runtime/re-tag","hiccups.runtime/character-escapes","hiccups.runtime/container-tags","hiccups.runtime/as-str","x","cljs.core/Keyword","cljs.core/Symbol","cljs.core/name","hiccups.runtime/*html-mode*","hiccups.runtime/xml-mode?","cljs.core._EQ_","hiccups.runtime/in-mode","mode","f","*html-mode*-orig-val__51762","*html-mode*-temp-val__51763","hiccups.runtime/escape-html","text","clojure.string/escape","hiccups.runtime/h","hiccups.runtime/end-tag","var_args","G__51768","hiccups.runtime/xml-attribute","js/Error","name","value","hiccups.runtime.xml_attribute","escape?","p__51776","vec__51778","cljs.core.nth","hiccups.runtime/render-attribute","cljs.core/not","cljs.core/map?","hiccups.runtime/render-attr-map","attrs","cljs.core.apply","cljs.core/str","cljs.core.sort","cljs.core.map","p__51788","vec__51789","seq__51790","cljs.core/seq","first__51791","cljs.core/first","cljs.core/next","hiccups.runtime/normalize-element","tag","content","vec__51794","_","id","class","cljs.core/re-matches","tag-attrs","clojure.string/replace","map-attrs","cljs.core.merge","hiccups.runtime/render-element","element","vec__51798","or__4126__auto__","hiccups.runtime/render-html","cljs.core/vector?","cljs.core/seq?"],"sourcesContent":["(ns hiccups.runtime\n  (:require [clojure.string :as cstring]))\n\n(def ^{:doc \"Regular expression that parses a CSS-style id and class from a tag name.\" :private true}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(def ^{:doc \"Characters to replace when escaping HTML\" :private true}\n  character-escapes {\\& \"&amp;\", \\< \"&lt;\", \\> \"&gt;\", \\\" \"&quot;\"})\n\n(def ^{:doc \"A list of tags that need an explicit ending tag when rendered.\"}\n  container-tags\n  #{\"a\" \"b\" \"body\" \"canvas\" \"dd\" \"div\" \"dl\" \"dt\" \"em\" \"fieldset\" \"form\" \"h1\" \"h2\" \"h3\"\n    \"h4\" \"h5\" \"h6\" \"head\" \"html\" \"i\" \"iframe\" \"label\" \"li\" \"ol\" \"option\" \"pre\"\n    \"script\" \"span\" \"strong\" \"style\" \"table\" \"textarea\" \"ul\"})\n\n(defn as-str [x]\n  (if (or (keyword? x) (symbol? x))\n    (name x)\n    (str x)))\n\n(def ^:dynamic *html-mode* :xml)\n\n(defn- xml-mode? []\n  (= *html-mode* :xml))\n\n(defn in-mode [mode f]\n  (binding [*html-mode* mode]\n    (f)))\n\n(defn escape-html\n  \"Change special characters into HTML character entities.\"\n  [text]\n  (-> (as-str text)\n      (cstring/escape character-escapes)))\n\n(def h escape-html) ; alias for escape-html\n\n(defn end-tag []\n  (if (xml-mode?) \" />\" \">\"))\n\n(defn xml-attribute\n  ([name value] (xml-attribute name value true))\n  ([name value escape?]\n   (str \" \" (as-str name) \"=\\\"\" (if escape? (escape-html value) value) \"\\\"\")))\n\n(declare render-attr-map)\n\n(defn render-attribute [[name value]]\n  (cond\n    (true? value)\n      (if (xml-mode?)\n          (xml-attribute name name)\n          (str \" \" (escape-html name)))\n    (not value)\n      \"\"\n    :else\n      (xml-attribute name (if (map? value) (render-attr-map value) (escape-html value)) false)))\n\n(defn render-attr-map [attrs]\n  (apply str\n    (sort (map render-attribute attrs))))\n\n(defn normalize-element\n  \"Ensure a tag vector is of the form [tag-name attrs content].\"\n  [[tag & content]]\n  (when (not (or (keyword? tag) (symbol? tag) (string? tag)))\n    (throw (str tag \" is not a valid tag name\")))\n  (let [[_ tag id class] (re-matches re-tag (as-str tag))\n        tag-attrs        {:id id\n                          :class (if class (cstring/replace class \".\" \" \"))}\n        map-attrs        (first content)]\n    (if (map? map-attrs)\n      [tag (merge tag-attrs map-attrs) (next content)]\n      [tag tag-attrs content])))\n\n(declare render-html)\n\n(defn render-element\n  \"Render a tag vector as a HTML element.\"\n  [element]\n  (let [[tag attrs content] (normalize-element element)]\n    (cond\n      (:dangerouslySetInnerHTML attrs)\n      (-> attrs :dangerouslySetInnerHTML :__html)\n      (:dangerously-set-inner-HTML attrs)\n      (-> attrs :dangerously-set-inner-HTML :__html)\n      (or content (container-tags tag))\n      (str \"<\" tag (render-attr-map attrs) \">\"\n           (render-html content)\n           \"</\" tag \">\")\n      :else\n      (str \"<\" tag (render-attr-map attrs) (end-tag)))))\n\n(defn render-html\n  \"Turn a Clojure data type into a string of HTML.\"\n  [x]\n  (cond\n    (vector? x) (render-element x)\n    (seq? x) (apply str (map render-html x))\n    :else (escape-html x)))\n"]}